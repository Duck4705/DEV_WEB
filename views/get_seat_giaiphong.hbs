<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/x-icon" href="/img/img_access/video-camera.png">
    <link rel="stylesheet" href="/style.css">
    <link rel="stylesheet" href="/profile.css">
    <link rel="stylesheet" href="/login.css">
    <link rel="stylesheet" href="/get_seat.css">
    <link rel="stylesheet" href="/movie_details.css">
    <script src="https://unpkg.com/phosphor-icons"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100..700;1,100..700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Anton&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <title>Đặt vé xem phim</title>
</head>
<body>
    <div class="top_bar top_bar-row" style="border-bottom: 1px rgba(140, 140, 140, 0.5) solid;">
        <div class="align_row topbar-group" style="color: white;">
            <i style="font-size: 40px;" class="ph ph-video-camera"></i>
            <h1 class="logoFont" style="font-size: 20px; margin: 0px 10px; font-weight: 600;">UIT THEATER</h1>
        </div>
        <div class="align_row topbar-group hide-mobile">
            <a href="" class="booking hide-mobile">
                <i style="margin-right: 8px; font-size: 22px;" class="ph ph-ticket"></i>
                <span style="font-family: 'Anton', sans-serif;">ĐẶT VÉ NGAY</span>
            </a>
            <a href="" class="booking hide-mobile">
                <i style="margin-right: 8px; font-size: 22px;" class="ph ph-popcorn"></i>
                <span style="font-family: 'Anton', sans-serif;">ĐẶT BẮP NƯỚC</span>
            </a>
        </div>
        <div class="align_row topbar-group searchBar" style="color: white; position: relative;">
            <input id="movie-search" type="text" placeholder="Tìm phim" style="padding: 10px 20px; border-radius: 50px; font-size: 15px; width: 100%;">
            <i style="position: absolute; right: 15px; top: 50%; transform: translateY(-50%); color: black; font-size: 15px;" class="ph ph-magnifying-glass"></i>
            <ul style="border: none;" id="search-results" class="search-results"></ul>
        </div>
        <div class="align_row topbar-group" style="color: white;">
            {{#if user}}
                <div class="user-menu align_row">
                    <div class="dropdown align_row">
                        <img src="/profile/avatar/{{user.ID_U}}" class="img-user" alt="">
                        <div class="dropdown-menu" style="margin-top: 120px; margin-left: 150px;">
                            <a href="/profile"><i style="margin: 0px 8px 0px 0px;" class="ph ph-user"></i>Trang cá nhân</a>
                            <a href="/logout"><i style="margin: 0px 8px 0px 0px;" class="ph ph-sign-out"></i>Đăng xuất</a>
                        </div>
                    </div>
                    <button class="dropdown-toggle hide-mobile">{{user.TongSoTien}} VNĐ</button>
                </div>
            {{else}}
                <div class="align_row signIn">
                    <a href="/login" class="signIn_logo" style="color: #f8fafc;"><i style="font-size: 30px; margin: 10px;" class="ph ph-user-circle"></i></a>
                    
                    <h2 class="hide-mobile" style="font-size: 20px;">
                        <a class="btSign" style="background-color: #0f172a; color: #f8fafc;" href="/login">Đăng nhập</a>
                    </h2>
                </div>
            {{/if}}
        </div>
    </div>
    <div style="padding: 50px"></div>
    <h1 class="fontH1" style="font-size: 40px; font-family: 'Anton', sans-serif; margin: 40px; color: #f8fafc">ĐẶT VÉ XEM PHIM</h1>
    <div class="movie-info">
        <h2>{{phim}}</h2>
        <p><strong>Rạp:</strong> {{rapPhim}} - <strong>Phòng:</strong> {{phongChieu}}</p>
        <p><strong>Suất chiếu:</strong> {{ngayChieu}}</p>
        <p><strong>Giá vé đơn:</strong> {{giaVeDon}} </p>
        <p><strong>Giá vé đôi:</strong> {{giaVeDoi}}</p>
    </div>
    
    {{!-- <div class="screen">MÀN HÌNH</div> --}}
    <div class="seat1" style="margin-bottom: 10px;">
        <h1 class="fontH1" style="font-size: 40px; font-family: 'Anton', sans-serif; margin: 40px;">CHỌN GHẾ</h1>
        <img src="/img/img_access/screen.png" alt="" width="100%">
    </div>

    <div id="seats-container" class="seats-container">
        <!-- Ghế sẽ được thêm ở đây bằng JavaScript -->
    </div>
    
    <div class="controls">
        <div>
            <span id="timer">Thời gian: <span id="time">05:00</span></span>
            <span id="price-info" style="margin-left: 20px; display: none; background: #333; color: white; padding: 10px 15px; border-radius: 5px;">
                <span>Tổng tiền: <span id="total-price">0</span> VNĐ</span>
                <div style="font-size: 0.9em; margin-top: 5px;">
                    <div>Ghế đơn: <span id="single-seat-count">0</span> | Giá: <span id="single-seat-price">0</span> VNĐ</div>
                    <div>Ghế đôi: <span id="double-seat-count">0</span> | Giá: <span id="double-seat-price">0</span> VNĐ</div>
                </div>
            </span>
        </div>
        <div>
            <button id="cancel-btn" disabled>Hủy chọn</button>
            <button id="book-btn" disabled>Đặt vé</button>
        </div>
    </div>

    <div class="bottom_bar">
        <div class="align_row_between" style="width: 1200px; margin: 30px 0px;">
            <p>© 2023 Uitheater. All rights reserved.</p>
            <div class="align_row hide_mobile">
                <a style="color: #f8fafc; padding: 0px 10px;" href="">Toàn diện</a>
                <a style="color: #f8fafc; padding: 0px 10px;" href="">Sáng tạo</a>
                <a style="color: #f8fafc; padding: 0px 10px;" href="">Phụng sự</a>
            </div>
        </div>
        <div class="align_row">
            <i style="font-size: 50px;" class="ph ph-video-camera"></i>
            <h1 style="font-size: 30px; margin-left: 20px; margin-top: 8px; font-weight: bold;">UIT THEATER</h1>
        </div>
        <div class="align_row">
            <h4 style="font-size: 25px; margin: 10px 0px;">[NT208.P24] - Nhóm 3</h4>
        </div>
    </div>

    <script>
        const userId = '{{user.ID_U}}' || 'user-' + Math.random().toString(36).substr(2, 9);
        const currentScreening = "{{ID_SC}}"; // Get the screening ID from the handlebars template
        let selectedSeats = new Set();
        let timerInterval = null;
        let remainingTime = 300; // 5 minutes
        let baseTicketPrice = 45000; // Giá vé cơ bản mặc định
        let seatTypes = {}; // Lưu thông tin loại ghế (Đơn hoặc Đôi)
        
        // DOM elements
        const bookBtn = document.getElementById('book-btn');
        const cancelBtn = document.getElementById('cancel-btn');
        const timerElement = document.getElementById('timer');
        const timeElement = document.getElementById('time');
        const seatsCountElement = document.getElementById('seats-count');
        const priceInfoElement = document.getElementById('price-info');
        const totalPriceElement = document.getElementById('total-price');
        const singleSeatCountElement = document.getElementById('single-seat-count');
        const singleSeatPriceElement = document.getElementById('single-seat-price');
        const doubleSeatCountElement = document.getElementById('double-seat-count');
        const doubleSeatPriceElement = document.getElementById('double-seat-price');
       
        const seatsContainer = document.getElementById('seats-container');
        
        // Connect to WebSocket
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
	const host = window.location.host;
	const ws = new WebSocket(`${protocol}//${host}`);
        
        ws.onopen = () => {
            console.log('WebSocket connection established');
            // Request seat data for the current screening
            if (currentScreening) {
                ws.send(JSON.stringify({
                    type: 'selectScreening',
                    screeningId: currentScreening,
                    userId: userId
                }));
                
                // Lấy thông tin giá vé từ server
                fetchTicketPrice();
            } else {
                alert('Không có ID suất chiếu. Vui lòng kiểm tra URL.');
            }
        };
        
        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            console.log('Received message:', data);
            
            if (data.type === 'screeningData') {
                console.log('Received seat data:', data.seats);
                updateAllSeats(data.seats);
            } 
            else if (data.type === 'seatUpdate') {
                if (data.screeningId === currentScreening) {
                    updateSeat(data.seat);
                }
            }
            else if (data.type === 'seatUpdates') {
                if (data.screeningId === currentScreening) {
                    for (const seatId in data.seats) {
                        updateSeat(data.seats[seatId]);
                    }
                }
            }
            else if (data.type === 'screeningRefreshed') {
                if (data.screening.id === currentScreening) {
                    updateAllSeats(data.seats);
                    alert('Dữ liệu ghế đã được cập nhật từ database!');
                }
            }
            else if (data.type === 'seatsSelected') {
                // Ghế đã được chọn thành công
                for (const seatId of data.seatIds) {
                    if (!selectedSeats.has(seatId)) {
                        selectedSeats.add(seatId);
                    }
                }
                
                // Chỉ bắt đầu bộ đếm thời gian nếu đây là ghế đầu tiên được chọn
                if (selectedSeats.size === 1) {
                    startTimer();
                }
                
                updateControls();
            }
            else if (data.type === 'seatDeselected') {
                selectedSeats.delete(data.seatId);
                updateControls();
                if (selectedSeats.size === 0) {
                    stopTimer();
                }
            }
            else if (data.type === 'bookingCreated') {
                selectedSeats.clear();
                stopTimer();
                updateControls();
                alert(data.message);
                // Redirect to payment page
                if (data.redirectUrl) {
                    window.location.href = data.redirectUrl;
                }
            }
            else if (data.type === 'error') {
                alert(data.message);
            }
        };
        
        ws.onerror = (error) => {
            console.error('WebSocket error:', error);
            alert('Có lỗi xảy ra khi kết nối đến máy chủ. Vui lòng thử lại sau.');
        };
        
        ws.onclose = () => {
            console.log('WebSocket connection closed');
        };
        
        // Event listeners
        bookBtn.addEventListener('click', () => {
            if (selectedSeats.size > 0) {
                ws.send(JSON.stringify({
                    type: 'bookSeats',
                    screeningId: currentScreening,
                    seatIds: Array.from(selectedSeats),
                    userId: userId
                }));
            }
        });
        
        cancelBtn.addEventListener('click', () => {
            const seatsToDeselect = Array.from(selectedSeats);
            for (const seatId of seatsToDeselect) {
                deselectSeat(seatId);
            }
        });
        
        
        
        window.addEventListener('beforeunload', () => {
            if (selectedSeats.size > 0) {
                selectedSeats.forEach(seatId => {
                    ws.send(JSON.stringify({
                        type: 'deselectSeat',
                        screeningId: currentScreening,
                        seatId: seatId,
                        userId: userId
                    }));
                });
            }
        });
        
        // Main functions
        function updateAllSeats(seats) {
            // Clear existing seat container
            seatsContainer.innerHTML = '';
            
            // Define seat rows and their layout
            const seatRows = ['A', 'B', 'C', 'D','E','F','G','H','I','J'];
            
            // Custom layouts for each row
            const rowLayouts = {
                'A': [1, 2 ,3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                'B': [1, 2 ,3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                'C': [1, 2 ,3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                'D': [1, 2 ,3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                'E': [1, 2 ,3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                'F': [1, 2 ,3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                'G': [1, 2 ,3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                'H': [1, 2 ,3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                'I': [1, 2 ,3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                'J': [1, 2 ,3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
            };
            
            // Create map of seat data by ID
            const seatMap = {};
            for (const seatId in seats) {
                const seat = seats[seatId];
                seat.row = seatId.charAt(0);                  // Extract row letter (A, B, C...)
                seat.number = parseInt(seatId.substring(1));  // Extract seat number
                seatMap[seatId] = seat;
            }
            
            // Render each row
            seatRows.forEach(row => {
                // Create row container
                const rowContainer = document.createElement('div');
                rowContainer.className = 'seat-row';
                
                // Add row label
                const rowLabel = document.createElement('div');
                rowLabel.className = 'row-label';
                rowLabel.textContent = row;
                rowContainer.appendChild(rowLabel);
                
                // Get layout for this row
                const layout = rowLayouts[row] || [];
                
                // Render seats in this row according to layout
                layout.forEach(seatNumber => {
                    if (seatNumber === null) {
                        // This is a spacer (empty spot)
                        const spacer = document.createElement('div');
                        spacer.className = 'moreseat';
                        rowContainer.appendChild(spacer);
                    } else {
                        // Format seat ID (e.g., 'A1' becomes 'A01')
                        const seatId = `${row}${seatNumber.toString().padStart(2, '0')}`;
                        
                        // Create seat element
                        const seatElement = document.createElement('div');
                        seatElement.id = seatId;
                        seatElement.textContent = seatNumber;
                        
                        // Set initial status
                        let status = 'available';
                        let selectedBy = null;
                        
                        // If seat exists in data from server, use its status
                        if (seatMap[seatId]) {
                            status = seatMap[seatId].status;
                            selectedBy = seatMap[seatId].selectedBy;
                        }
                        
                        seatElement.className = 'seat ' + status;
                        if (status === 'selected' && selectedBy === userId) {
                            seatElement.classList.add('selected');
                            seatElement.classList.remove('selected-by-others');
                            seatElement.style.backgroundColor = '#4CAF50'; // Green
                            selectedSeats.add(seatId);
                        } else if (status === 'selected') {
                            seatElement.classList.add('selected-by-others');
                            seatElement.style.backgroundColor = '#FFC107'; // Yellow
                        } else if (status === 'booked') {
                            seatElement.style.backgroundColor = '#808080'; // Grey
                        }
                        
                        // Add click event
                        seatElement.addEventListener('click', () => {
                            if (status === 'available') {
                                selectSeat(seatId);
                            } else if (status === 'selected' && selectedBy === userId) {
                                deselectSeat(seatId);
                            }
                        });
                        
                        rowContainer.appendChild(seatElement);
                    }
                });
                
                seatsContainer.appendChild(rowContainer);
            });
            
            // Add seat legend
            addSeatLegend();
            
            // Update controls based on selected seats
            updateControls();
        }
        
        function addSeatLegend() {
            const legend = document.createElement('div');
            legend.className = 'legend';
            
            const availableSeat = createLegendItem('available', 'Ghế trống');
            const selectedSeat = createLegendItem('selected', 'Ghế đang chọn');
            const selectedByOtherSeat = createLegendItem('selected-by-others', 'Ghế đang được chọn');
            const bookedSeat = createLegendItem('booked', 'Ghế đã đặt');
            
            legend.appendChild(availableSeat);
            legend.appendChild(selectedSeat);
            legend.appendChild(selectedByOtherSeat);
            legend.appendChild(bookedSeat);
            
            seatsContainer.appendChild(legend);
        }
        
        function createLegendItem(status, label) {
            const item = document.createElement('div');
            item.className = 'legend-item';
            
            const box = document.createElement('div');
            box.className = 'legend-box ' + status;
            if (status === 'available') {
                box.style.backgroundColor = 'white';
            } else if (status === 'selected') {
                box.style.backgroundColor = '#4CAF50'; // Green
            } else if (status === 'selected-by-others') {
                box.style.backgroundColor = '#FFC107'; // Yellow
            } else if (status === 'booked') {
                box.style.backgroundColor = '#808080'; // Grey
            }
            
            const text = document.createElement('span');
            text.textContent = label;
            
            item.appendChild(box);
            item.appendChild(text);
            
            return item;
        }
        
        function updateSeat(seat) {
            const seatElement = document.getElementById(seat.id);
            if (!seatElement) return;
            
            // Update class and styling
            seatElement.className = 'seat';
            
            if (seat.status === 'available') {
                seatElement.classList.add('available');
                seatElement.style.backgroundColor = 'white';
                // Remove from selected seats if it was previously selected
                selectedSeats.delete(seat.id);
            } 
            else if (seat.status === 'selected' || seat.status === 'pending_payment') {
                seatElement.classList.add('selected');
                if (seat.selectedBy === userId) {
                    seatElement.style.backgroundColor = '#4CAF50'; // Green
                    selectedSeats.add(seat.id);
                } else {
                    seatElement.classList.remove('selected');
                    seatElement.classList.add('selected-by-others');
                    seatElement.style.backgroundColor = '#FFC107'; // Yellow
                    selectedSeats.delete(seat.id);
                }
            } 
            else if (seat.status === 'booked') {
                seatElement.classList.add('booked');
                seatElement.style.backgroundColor = '#808080'; // Grey
                selectedSeats.delete(seat.id);
            }
            
            updateControls();
        }
        
        function selectSeat(seatId) {
            console.log('Selecting seat:', seatId);
            ws.send(JSON.stringify({
                type: 'selectSeat',
                screeningId: currentScreening,
                seatId: seatId,
                userId: userId
            }));
        }
        
        function deselectSeat(seatId) {
            console.log('Deselecting seat:', seatId);
            ws.send(JSON.stringify({
                type: 'deselectSeat',
                screeningId: currentScreening,
                seatId: seatId,
                userId: userId
            }));
        }
        
        function refreshData(screeningId) {
            console.log('Refreshing data for screening:', screeningId);
            fetch(`/api/refresh?screeningId=${screeningId}`)
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        console.log(result.message);
                    } else {
                        console.error('Không thể làm mới dữ liệu:', result.message);
                        alert('Không thể làm mới dữ liệu: ' + result.message);
                    }
                })
                .catch(error => {
                    console.error('Lỗi khi gọi API làm mới:', error);
                    alert('Đã xảy ra lỗi khi làm mới dữ liệu');
                });
        }
        
        function startTimer() {
            timerElement.style.display = 'inline-block';
            clearInterval(timerInterval);
            remainingTime = 600;
            updateTimerDisplay();
            
            timerInterval = setInterval(() => {
                remainingTime--;
                updateTimerDisplay();
                
                if (remainingTime <= 0) {
                    stopTimer();
                    // Automatically deselect all seats after timer expires
                    const seatsToDeselect = Array.from(selectedSeats);
                    for (const seatId of seatsToDeselect) {
                        deselectSeat(seatId);
                    }
                }
            }, 1000);
        }
        
        function stopTimer() {
            clearInterval(timerInterval);
            timerInterval = null;
            timerElement.style.display = 'none';
        }
        
        function updateTimerDisplay() {
            const minutes = Math.floor(remainingTime / 60);
            const seconds = remainingTime % 60;
            timeElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
        
        // Hàm lấy thông tin giá vé từ server
        function fetchTicketPrice() {
            fetch(`/api/ticket-price?screeningId=${currentScreening}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        baseTicketPrice = data.price || 45000;
                        
                        // Hiển thị giá vé đơn và đôi trong phần thông tin phim
                        const singlePriceElement = document.querySelector('.movie-info p:nth-of-type(3)');
                        const doublePriceElement = document.querySelector('.movie-info p:nth-of-type(4)');
                        
                        if (singlePriceElement && doublePriceElement) {
                            singlePriceElement.innerHTML = `<strong>Giá vé đơn:</strong> ${baseTicketPrice.toLocaleString('vi-VN')} VNĐ`;
                            doublePriceElement.innerHTML = `<strong>Giá vé đôi:</strong> ${(baseTicketPrice * 2).toLocaleString('vi-VN')} VNĐ`;
                        }
                        
                        fetchSeatTypes(); // Sau khi có giá vé, lấy thông tin loại ghế
                    } else {
                        console.error('Không thể lấy thông tin giá vé:', data.message);
                    }
                })
                .catch(error => {
                    console.error('Lỗi khi gọi API lấy giá vé:', error);
                });
        }

        // Hàm lấy thông tin loại ghế
        function fetchSeatTypes() {
            fetch(`/api/seat-types`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        seatTypes = data.seatTypes || {};
                        updatePriceDisplay();
                    } else {
                        console.error('Không thể lấy thông tin loại ghế:', data.message);
                    }
                })
                .catch(error => {
                    console.error('Lỗi khi gọi API lấy thông tin ghế:', error);
                    // Nếu không lấy được từ API, sử dụng dữ liệu mặc định
                    initializeDefaultSeatTypes();
                });
        }

        // Khởi tạo thông tin loại ghế mặc định
        function initializeDefaultSeatTypes() {
            // D-G rows are double seats, the rest are single seats
            const doubleRows = ['D', 'E', 'F', 'G'];
            
            // Tạo dữ liệu cho tất cả ghế
            const rows = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];
            
            rows.forEach(row => {
                for (let i = 1; i <= 20; i++) {
                    const seatId = `${row}${i.toString().padStart(2, '0')}`;
                    // Kiểm tra hàng ghế để xác định loại ghế
                    const seatType = doubleRows.includes(row) ? 'Đôi' : 'Đơn';
                    
                    // Lưu thông tin loại ghế
                    seatTypes[seatId] = seatType;
                }
            });
            
            updatePriceDisplay();
        }

        // Tính toán và cập nhật hiển thị giá vé
        function updatePriceDisplay() {
            if (selectedSeats.size === 0) {
                priceInfoElement.style.display = 'none';
                return;
            }
            
            priceInfoElement.style.display = 'inline-block';
            
            let singleSeatCount = 0;
            let doubleSeatCount = 0;
            let totalPrice = 0;
            
            // Đảm bảo baseTicketPrice là số
            const basePrice = Number(baseTicketPrice);
            
            // Đếm số ghế từng loại và tính giá tiền
            selectedSeats.forEach(seatId => {
                const seatType = seatTypes[seatId] || 'Đơn'; // Mặc định là ghế đơn nếu không có thông tin
                
                if (seatType === 'Đôi') {
                    doubleSeatCount++;
                    totalPrice += basePrice * 2;
                } else {
                    singleSeatCount++;
                    totalPrice += basePrice;
                }
            });
            
            // Cập nhật hiển thị
            singleSeatCountElement.textContent = singleSeatCount;
            singleSeatPriceElement.textContent = (singleSeatCount * basePrice).toLocaleString('vi-VN');
            
            doubleSeatCountElement.textContent = doubleSeatCount;
            doubleSeatPriceElement.textContent = (doubleSeatCount * basePrice * 2).toLocaleString('vi-VN');
            
            totalPriceElement.textContent = totalPrice.toLocaleString('vi-VN');
        }
        
        function updateControls() {
            const hasSelections = selectedSeats.size > 0;
            const controlsElement = document.querySelector('.controls');
            bookBtn.disabled = !hasSelections;
            cancelBtn.disabled = !hasSelections;
            
            if (hasSelections) {
                // Hiện khung điều khiển khi có ghế đang được chọn
                controlsElement.style.display = 'flex';
                // Cập nhật thông tin giá vé
                updatePriceDisplay();
            } else {
                // Ẩn khung điều khiển khi không có ghế nào được chọn
                controlsElement.style.display = 'none';
                priceInfoElement.style.display = 'none';
            }
        }
    </script>
    <script>
        // --- Smart Search ---
            document.addEventListener('DOMContentLoaded', () => {
            const searchInput = document.getElementById('movie-search');
            const resultsBox = document.getElementById('search-results');

            if (!searchInput || !resultsBox) return;

            // Debounce function
            const debounce = (func, delay) => {
                let timeout;
                return (...args) => {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func(...args), delay);
                };
            };

            const handleSearch = async (query) => {
            try {
                const response = await fetch(`/movie_details/search?q=${encodeURIComponent(query)}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('Search results data:', data); // Add this for debugging
                displayResults(data);
            } catch (error) {
                console.error('Search failed:', error);
                resultsBox.innerHTML = '<li style="color: red;">Không thể tải kết quả</li>';
                
                // Try to load random movies as fallback
                try {
                    const fallbackResponse = await fetch('/movie_details/search');
                    const fallbackData = await fallbackResponse.json();
                    displayResults(fallbackData);
                } catch (fallbackError) {
                    console.error('Fallback also failed:', fallbackError);
                }
            }
        };

            const displayResults = (data) => {
            resultsBox.innerHTML = '';
            
            if (!data || data.length === 0) {
                resultsBox.innerHTML = '<li>Không tìm thấy phim phù hợp</li>';
                return;
            }

            data.forEach(movie => {
                const li = document.createElement('li');
                li.innerHTML = `
                    <a href="/movie_details/${movie.ID_P}">
                        ${movie.TenPhim}
                    </a>
                `;
                resultsBox.appendChild(li);
            });
        };

            // Event listeners
            searchInput.addEventListener('input', debounce((e) => {
                const query = e.target.value.trim();
                if (query) {
                    handleSearch(query);
                } else {
                    // Show random movies when empty
                    handleSearch('');
                }
            }, 300));

            searchInput.addEventListener('focus', () => {
                if (searchInput.value.trim() === '') {
                    handleSearch('');
                }
            });

            document.addEventListener('click', (e) => {
                if (!e.target.closest('.searchBar')) {
                    resultsBox.innerHTML = '';
                }
            });
        });
    </script>
</body>
</html>
