<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trang Thanh Toán</title>
    <link rel="stylesheet" href="/index.css">
    <link rel="stylesheet" href="/style.css">
    <link rel="stylesheet" href="/transaction_step1.css">
    <script src="https://unpkg.com/phosphor-icons"></script>
    <link rel="icon" type="image/x-icon" href="/img/img_access/video-camera.png">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Anton&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
</head>
<body>
    <div class="top_bar" style="border-bottom: 1px rgba(140, 140, 140, 0.5) solid; z-index: 1000;">
        <a href="/" class="align_row topbar-group" style="color: white; text-decoration: none;">
            <i style="font-size: 40px;" class="ph ph-video-camera"></i>
            <h1 class="logoFont" style="font-size: 20px; margin: 0px 10px; font-weight: 600;">UIT THEATER</h1>
        </a>
        <div class="align_row">
            <a href="/" class="booking">
                <i style="margin-right: 10px; font-size: 25px;" class="ph ph-house"></i>
                <span style="font-family: 'Anton', sans-serif;">VỀ TRANG CHỦ</span>
            </a>
        </div>
    </div>
    <!-- Step Indicator -->
    <div class="step-indicator">
        <span class="step active">1. THÔNG TIN KHÁCH HÀNG</span>
        <span class="step">2. THANH TOÁN</span>
        <span class="step">3. HOÀN TẤT</span>
    </div>

    <!-- Countdown Timer -->
    {{#if remainingTime}}
    <div class="countdown-container">
        <div class="countdown-timer">
            <div class="timer-icon"><i class="ph ph-timer"></i></div>
            <div class="timer-text">Thời gian còn lại để đặt vé: <span id="countdown" class="countdown-display">{{remainingTime}}</span></div>
        </div>
    </div>
    {{/if}}

    <!-- Jumbotron -->
    <div class="jumbotron">
        <!-- Left Form -->
        <div class="form-container">
            <form action="/payment/transaction_step2" method="POST">
                <input type="hidden" name="bookingId" value="{{bookingId}}">
                <input type="hidden" name="amount" value="{{totalPrice}}">
                <div>
                    <label for="name">Họ và tên <span style="color: red;">*</span></label>
                    <input type="text" id="name" name="name" placeholder="Họ và tên" required>
                </div>
                <div>
                    <label for="phone">Số điện thoại <span style="color: red;">*</span></label>
                    <input type="tel" id="phone" name="phone" placeholder="Số điện thoại" required>
                </div>
                <div>
                    <label for="email">Email <span style="color: red;">*</span></label>
                    <input type="email" id="email" name="email" placeholder="Email" required>
                </div>
                <div>
                    <label>
                        <input type="checkbox" required> Đảm bảo mua vé đúng số tuổi quy định.
                    </label>
                </div>
                <div>
                    <label>
                        <input type="checkbox" required> Đồng ý với <a href="/payment/DieuKhoanChung" style="color: yellow;">điều khoản</a> của UIT THEATER.
                    </label>
                </div>
                <button type="submit">Tiếp Tục</button>
            </form>
        </div>

        <!-- Right Summary -->
        <div class="summary-container">
            <h2>{{rap}}</h2>
            <p><strong>Suất chiếu:</strong> {{suatchieu}}</p>
            <p><strong>Ghế:</strong> {{seatList}}</p>
            <hr>
            <p><strong>Mã đặt vé:</strong> {{bookingId}}</p>
            <p><strong>Tổng tiền:</strong> {{totalPrice}} VND</p>
            <hr>
            <div class="total">{{totalPrice}} VND</div>
        </div>
    </div>
    {{#if error}}
    <div id="toast" class="alert alert-danger" style="position: fixed; top: 20px; right: 20px; z-index: 9999;">
        {{error}}
    </div>
    <script>
        setTimeout(function() {
            document.getElementById('toast').style.display = 'none';
        }, 3000);
    </script>
    {{/if}}

    {{#if remainingTime}}
    <script>
        // Countdown timer implementation
        let timeLeft = {{remainingTime}};
        const countdownElement = document.getElementById('countdown');
        
        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = seconds % 60;
            return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
        }
        
        function updateCountdown() {
            countdownElement.textContent = formatTime(timeLeft);
            
            if (timeLeft <= 60) {
                countdownElement.classList.add('countdown-warning');
            }
            
            if (timeLeft <= 0) {
                clearInterval(countdownInterval);
                alert('Thời gian đặt vé đã hết. Bạn sẽ được chuyển về trang chọn ghế.');
                window.location.href = '/';
                return;
            }
            
            timeLeft--;
        }
        
        // Update timer every second
        updateCountdown();
        const countdownInterval = setInterval(updateCountdown, 1000);
        
        // Add form validation to check time remaining when submitting
        document.querySelector('form').addEventListener('submit', function(event) {
            if (timeLeft <= 0) {
                event.preventDefault();
                alert('Thời gian đặt vé đã hết. Vui lòng chọn ghế lại.');
                window.location.href = '/';
            }
        });
    </script>
    {{/if}}
    <script>
    // Hàm format lại tổng số tiếng
    function formatVietnameseNumber(number) {
        if (!number) return '0';
        
        // chuyển về chuỗi và format lại
        let numString = number.toString().replace(/[.,]/g, '');
        
        // Thêm dấu chấm mỗi 3 chữ số từ phải qua 
        return numString.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
    }

    // Hàm function lại giá tiền
    function formatCurrency(amount) {
        return formatVietnameseNumber(amount) + ' VNĐ';
    }

    // Cập nhật khi page load
    document.addEventListener('DOMContentLoaded', function() {
        const priceElements = document.querySelectorAll('.total, .value, [data-price]');
        
        priceElements.forEach(element => {
            const text = element.textContent;
            const numberMatch = text.match(/\d+/);
            
            if (numberMatch) {
                const number = numberMatch[0];
                const formattedNumber = formatVietnameseNumber(number);
                element.textContent = text.replace(number, formattedNumber);
            }
        });
        
        const totalPriceElements = document.querySelectorAll('p:contains("Tổng tiền"), .total');
        totalPriceElements.forEach(element => {
            if (element.textContent.includes('VN')) {
                const match = element.textContent.match(/(\d+)\s*VN/);
                if (match) {
                    const formatted = formatVietnameseNumber(match[1]);
                    element.textContent = element.textContent.replace(match[1], formatted);
                }
            }
        });
    });
    </script>
    <script>
class FormValidator {
    constructor() {
        this.errors = {};
        this.isValid = true;
    }

    // Xác thực tên
    validateName(name, fieldName = 'Họ và tên') {
        const nameRegex = /^[a-zA-ZÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼỀỀỂưăạảấầẩẫậắằẳẵặẹẻẽềềểỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễệỉịọỏốồổỗộớờởỡợụủứừỬỮỰỲỴÝỶỸửữựỳỵýỷỹ\s]+$/;
        
        if (!name || name.trim().length === 0) {
            this.errors[fieldName] = `Họ tên không được để trống`;
            return false;
        }
        
        if (name.trim().length < 2) {
            this.errors[fieldName] = `Họ tên phải có ít nhất 2 ký tự`;
            return false;
        }
        
        if (name.trim().length > 50) {
            this.errors[fieldName] = `Họ tên không được vượt quá 50 ký tự`;
            return false;
        }
        
        if (!nameRegex.test(name.trim())) {
            this.errors[fieldName] = `Họ tên không được chứa số hoặc ký tự đặc biệt`;
            return false;
        }
        
        // Kiểm tra khoảng trắng
        if (/\s{2,}/.test(name)) {
            this.errors[fieldName] = `${fieldName} không được chứa nhiều khoảng trắng liên tiếp`;
            return false;
        }
        
        delete this.errors[fieldName];
        return true;
    }

    // Xác thực số điện thoại
    validatePhone(phone, fieldName = 'Số điện thoại') {
        // Loại bỏ các ký tự không phải số, khoảng trắng, dấu gạch ngang, dấu ngoặc đơn và dấu cộng
        const cleanPhone = phone.replace(/[\s\-\(\)\+]/g, '');
        
        if (!cleanPhone || cleanPhone.length === 0) {
            this.errors[fieldName] = `Số điện thoại không được để trống`;
            return false;
        }
        
        // Vietnamese phone number regex: starts with 0, exactly 10 digits
        const phoneRegex = /^0[3-9]\d{8}$/;
        
        if (!phoneRegex.test(cleanPhone)) {
            if (cleanPhone.length !== 10) {
                this.errors[fieldName] = `Số điện thoại phải có đúng 10 chữ số`;
            } else if (!cleanPhone.startsWith('0')) {
                this.errors[fieldName] = `Số điện thoại phải bắt đầu bằng số 0`;
            } else if (!/^0[3-9]/.test(cleanPhone)) {
                this.errors[fieldName] = `Số điện thoại không hợp lệ (đầu số không đúng)`;
            } else {
                this.errors[fieldName] = `Số điện thoại không hợp lệ`;
            }
            return false;
        }
        
        delete this.errors[fieldName];
        return true;
    }

    // Xác thực email
    validateEmail(email, fieldName = 'Email') {
        if (!email || email.trim().length === 0) {
            this.errors[fieldName] = `Tên email không được để trống`;
            return false;
        }
        
        // Xác thực định dạng email
        const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
        
        if (!emailRegex.test(email.trim())) {
            this.errors[fieldName] = `Tên email không đúng định dạng`;
            return false;
        }
        
        if (email.trim().length > 254) {
            this.errors[fieldName] = `Tên email quá dài (tối đa 254 ký tự)`;
            return false;
        }
        
        delete this.errors[fieldName];
        return true;
    }

    // Xác thực toàn bộ form
    validateForm(formData) {
        this.errors = {};
        this.isValid = true;
        
        // Xác thực tên
        if (formData.name !== undefined) {
            this.isValid &= this.validateName(formData.name);
        }
        
        // Xác thực số điện thoại
        if (formData.phone !== undefined) {
            this.isValid &= this.validatePhone(formData.phone);
        }
        
        // Xác thực email
        if (formData.email !== undefined) {
            this.isValid &= this.validateEmail(formData.email);
        }
        
        return this.isValid;
    }

    // Nhận lỗi
    getErrors() {
        return this.errors;
    }

    getError(fieldName) {
        return this.errors[fieldName] || '';
    }

    hasError(fieldName) {
        return this.errors.hasOwnProperty(fieldName);
    }
}

const validator = new FormValidator();

// Xác thực từng trường khi người dùng nhập (real-time validation)
function validateField(input, validationType) {
    const value = input.value;
    const fieldName = input.getAttribute('data-field-name') || input.name || input.id;
    
    input.classList.remove('is-invalid', 'is-valid');
    
    const errorElement = document.getElementById(`${input.id}-error`) || 
                        document.querySelector(`[data-error-for="${input.id}"]`);
    
    let isValid = false;
    
    // Xác định loại xác thực dựa trên thuộc tính data-validate hoặc tên trường
    switch (validationType) {
        case 'name':
            isValid = validator.validateName(value, fieldName);
            break;
        case 'phone':
            isValid = validator.validatePhone(value, fieldName);
            break;
        case 'email':
            isValid = validator.validateEmail(value, fieldName);
            break;
    }
    
    // Áp dụng kết quả xác thực
    if (isValid) {
        input.classList.add('is-valid');
        if (errorElement) {
            errorElement.textContent = '';
            errorElement.style.display = 'none';
        }
    } else {
        input.classList.add('is-invalid');
        if (errorElement) {
            errorElement.textContent = validator.getError(fieldName);
            errorElement.style.display = 'block';
        } else {
            // Tạo phần tử thông báo lỗi nếu chưa có
            const newErrorElement = document.createElement('div');
            newErrorElement.id = `${input.id}-error`;
            newErrorElement.className = 'invalid-feedback';
            newErrorElement.style.display = 'block';
            newErrorElement.textContent = validator.getError(fieldName);
            input.parentNode.appendChild(newErrorElement);
        }
    }
    
    return isValid;
}

function formatPhoneNumber(input) {
    let value = input.value.replace(/\D/g, ''); 
    
    if (value.length > 10) {
        value = value.substring(0, 10); 
    }
    
    // Format dạng 0xxx xxx xxx
    if (value.length >= 7) {
        value = value.replace(/(\d{4})(\d{3})(\d{3})/, '$1 $2 $3');
    } else if (value.length >= 4) {
        value = value.replace(/(\d{4})(\d{3})/, '$1 $2');
    }
    
    input.value = value;
    
    validateField(input, 'phone');
}

function validateFormSubmission(formElement) {
    const formData = new FormData(formElement);
    const data = {};
    
    // Thu thập dữ liệu từ form
    for (let [key, value] of formData.entries()) {
        data[key] = value;
    }
    
    // Xác thực toàn bộ form
    const isValid = validator.validateForm({
        name: data.name || data.fullName || data.customerName,
        phone: data.phone || data.phoneNumber,
        email: data.email || data.emailAddress
    });
    
    // Trả về kết quả xác thực
    Object.keys(validator.getErrors()).forEach(fieldName => {
        const input = formElement.querySelector(`[name="${fieldName}"], [data-field-name="${fieldName}"]`);
        if (input) {
            input.classList.add('is-invalid');
            
            const errorElement = document.getElementById(`${input.id}-error`) || 
                                document.querySelector(`[data-error-for="${input.id}"]`);
            
            if (errorElement) {
                errorElement.textContent = validator.getError(fieldName);
                errorElement.style.display = 'block';
            }
        }
    });
    
    if (!isValid) {
        const firstError = formElement.querySelector('.is-invalid');
        if (firstError) {
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
            firstError.focus();
        }

        showErrorToast('Vui lòng kiểm tra lại thông tin đã nhập');
    }
    
    return isValid;
}

function showErrorToast(message) {
    const existingToast = document.getElementById('validation-toast');
    if (existingToast) {
        existingToast.remove();
    }
    
    const toast = document.createElement('div');
    toast.id = 'validation-toast';
    toast.className = 'alert alert-danger';
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        max-width: 300px;
        animation: slideIn 0.3s ease-out;
    `;
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    // Tự động ẩn toast sau 5 giây
    setTimeout(() => {
        if (toast && toast.parentNode) {
            toast.remove();
        }
    }, 5000);
}

document.addEventListener('DOMContentLoaded', function() {
    const nameInputs = document.querySelectorAll('input[name*="name"], input[id*="name"], input[data-validate="name"]');
    nameInputs.forEach(input => {
        input.addEventListener('blur', () => validateField(input, 'name'));
        input.addEventListener('input', debounce(() => validateField(input, 'name'), 500));
    });
    
    const phoneInputs = document.querySelectorAll('input[name*="phone"], input[id*="phone"], input[data-validate="phone"], input[type="tel"]');
    phoneInputs.forEach(input => {
        input.addEventListener('input', () => formatPhoneNumber(input));
        input.addEventListener('blur', () => validateField(input, 'phone'));
    });
    
    const emailInputs = document.querySelectorAll('input[name*="email"], input[id*="email"], input[data-validate="email"], input[type="email"]');
    emailInputs.forEach(input => {
        input.addEventListener('blur', () => validateField(input, 'email'));
        input.addEventListener('input', debounce(() => validateField(input, 'email'), 500));
    });
    
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        form.addEventListener('submit', function(e) {
            if (!validateFormSubmission(this)) {
                e.preventDefault();
                return false;
            }
        });
    });
});

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}
</script>

<style>
.is-valid {
    border-color: #28a745 !important;
    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25) !important;
}

.is-invalid {
    border-color: #dc3545 !important;
    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
}

.invalid-feedback {
    display: block;
    width: 100%;
    margin-top: 0.25rem;
    font-size: 0.875em;
    color: #dc3545;
}

.valid-feedback {
    display: block;
    width: 100%;
    margin-top: 0.25rem;
    font-size: 0.875em;
    color: #28a745;
}

@keyframes slideIn {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-control {
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}
</style>
</body>
<footer class="bottom_bar" style="margin-top: 150px;">
    <div class="align_row_between" style="width: 1200px; margin: 30px 0px; ">
        <p>© 2023 Uitheater. All rights reserved.</p>
        <div class="align_row hide-mobile">
            <a style="color: #f8fafc; padding: 0px 10px;" href="">Toàn diện</a>
            <a style="color: #f8fafc; padding: 0px 10px;" href="">Sáng tạo</a>
            <a style="color: #f8fafc; padding: 0px 10px;" href="">Phụng sự</a>
        </div>
    </div>
    <div class="align_row">
        <i style="font-size: 50px;" class="ph ph-video-camera"></i>
        <h1 style="font-size: 30px; margin-left: 20px; margin-top: 8px; font-weight: bold;">UIT THEATER</h1>
    </div>
    <div class="align_row">
        <h4 style="font-size: 25px; margin: 10px 0px;">[NT208.P24] - Nhóm 3</h4>
    </div>
</footer>
</html>